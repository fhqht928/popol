# -*- coding: utf-8 -*-
"""Untitled48.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QK98HsW2LoiYK-PoUX4hxA-VgF67sJYe
"""

import numpy as np
import pandas as pd
import os
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud

DATA_IN_PATH = './data_in/'
print("파일 크기 : ")
for file in os.listdir(DATA_IN_PATH):
  if 'txt' in file:
    print(file.ljust(30) +str(round(os.path.getsize(DATA_IN_PATH + file)/ 1000000, 2)) + 'MB')

train_data = pd.read_csv(DATA_IN_PATH+ 'ratings_train.txt', header= 0, delimiter = '\t', quoting = 3)
train_data.head()

print('전체 학습 데이터의 개수 : {}'.format(len(train_data)))

train_length = train_data['document'].astype(str).apply(len)

train_length.head()

plt.figure(figsize = (12,5))
plt.hist(train_length, bins = 200, alpha= 0.5, color= 'r', label = 'word')
plt.yscale('log', nonposy = 'clip')
plt.title('Log-Histogram of length of review')
plt.xlabel('Length of review')
plt.ylabel('Number of review')

print('리뷰 길이 최댓값 : {}'.format(np.max(train_length)))
print('리뷰 길이 최솟값 : {}'.format(np.min(train_length)))
print('리뷰 길이 평균값 : {:.2f}'.format(np.mean(train_length)))
print('리뷰 길이 표준편차 : {:.2f}'.format(np.std(train_length)))
print('리뷰 길이 중간값 : {:.2f}'.format(np.median(train_length)))

plt.figure(figsize= (12,5))
plt.boxplot(train_length,
            labels = ['counts'],
            showmeans=True)

train_review = [review for review in train_data['document'] if type(review) is str]

wordcloud = WordCloud(font_path = DATA_IN_PATH + 'NanumGothic.otf').generate(' '.join(train_review))

plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.show()

fig,axe = plt.subplots(ncols= 1)
fig.set_size_inches(6, 3)
sns.countplot(train_data['label'])

print("긍정 리뷰 개수 : {}".format(train_data['label'].value_counts()[1]))
print("긍정 리뷰 개수 : {}".format(train_data['label'].value_counts()[0]))

train_word_counts= train_data['document'].astype(str).apply(lambda x:len(x.split(' ')))

print(train_word_counts)

plt.figure(figsize=(15,10))
plt.hist(train_word_counts, bins=50, facecolor='r', label='train')
plt.title('Log-Histogram of word count in review', fontsize=15)
plt.yscale('log', nonposy= 'clip')
plt.legend()
plt.xlabel('Number of words', fontsize= 15)
plt.ylabel('Number of reviews', fontsize= 15)

print('리뷰 단어 최댓값 : {}'.format(np.max(train_word_counts)))
print('리뷰 단어 최솟값 : {}'.format(np.min(train_word_counts)))
print('리뷰 단어 평균값 : {:.2f}'.format(np.mean(train_word_counts)))
print('리뷰 단어 표준편차 : {:.2f}'.format(np.std(train_word_counts)))
print('리뷰 단어 중간값 : {:.2f}'.format(np.median(train_word_counts)))

qmarks = np.mean(train_data['document'].astype(str).apply(lambda x : '?' in x)) #물음표가 구두점으로 쓰임
fullstop = np.mean(train_data['document'].astype(str).apply(lambda x: '.' in x)) # 마침표

print('물음표가 있는 질문 : {:.2f}%'.format(qmarks * 100))
print('마침표가 있는 질문 : {:.2f}%'.format(fullstop * 100))

pip install konlpy

import re
import json
from konlpy.tag import Okt
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.preprocessing.text import Tokenizer

train_data = pd.read_csv(DATA_IN_PATH + 'ratings_train.txt', header=0, delimiter = '\t', quoting = 3)

train_data['document'][:5]

train_data['document'].nunique(), train_data['label'].nunique()

train_data.drop_duplicates(subset=['document'], inplace= True)

print('총 샘플의 수 : ',len(train_data))

print(train_data.groupby('label').size().reset_index(name = 'count'))

print(train_data.isnull().values.any())

print(train_data.isnull().sum())

train_data.loc[train_data.document.isnull()]

train_data = train_data.dropna(how = 'any') # Null 값 행 제거
print(train_data.isnull().values.any())

train_data['document']

train_data['document'] = train_data['document'].str.replace("[^ㄱ-ㅎㅏ-ㅣ가-힣 ]","")
train_data[:5]

train_data['document'] = train_data['document'].str.replace('^ +', "") # white space 데이터를 empty value로 변경
train_data['document'].replace('',np.nan, inplace= True)
print(train_data.isnull().sum())

train_data.loc[train_data.document.isnull()][:5]

train_data = train_data.dropna(how = 'any')
print(len(train_data))

test_data = pd.read_csv(DATA_IN_PATH + 'ratings_test.txt', header=0, delimiter = '\t', quoting = 3)

test_data.drop_duplicates(subset = ['document'], inplace= True)
test_data['document'] = test_data['document'].str.replace("[^ㄱ-ㅎㅏ-ㅣ가-힣]","")
test_data['document'] = test_data['document'].str.replace('^ +', "")
test_data['document'].replace('', np.nan, inplace= True)
test_data = test_data.dropna(how= 'any')
print('전처리 후 테스트용 샘플의 개수 : ', len(test_data))

stopwords = ['의', '가', '이', '은', '들', '는', '좀', '잘', '걍', '과', '도', '를', '으로', '자', '에', '와','한','하다']

okt = Okt()
okt.morphs('와 이런 것도 영화라고 차라리 뮤직비디오를 만드는 게 나을 뻔', stem = True)

def tokenizing_sentence(data):
  result = []
  for sentence in tqdm(data):
    tokenized_sentence = okt.morphs(sentence, stem=True) #토큰화
    stopwords_removed_sentence = [word for word in tokenized_sentence if not word in stopwords] #불용어 제거
    result.append(stopwords_removed_sentence)

  return result;

from tqdm import tqdm

X_train = tokenizing_sentence(train_data['document'])

print(X_train[:3])

X_test=tokenizing_sentence(test_data['document'])

X_test[:3]

tokenizer = Tokenizer()
tokenizer.fit_on_texts(X_train)

print(tokenizer.word_index)

threshold = 3
total_cnt = len(tokenizer.word_index) # 단어의 수
rare_cnt = 0 # 등장 빈도수가 threshold보다 작은 단어의 개수를 카운트
total_freq = 0
rare_freq = 0

# 단어와 빈도수의 쌍(pair)을 key와 value로 받는다
for key,value in tokenizer.word_counts.items():
  total_freq = total_freq + value

  # 단어의 등장 빈도수가 threshold보다 작으면
  if(value < threshold):
    rare_cnt = rare_cnt + 1
    rare_freq = rare_freq + value


print('단어 집합(vocabulary)의 크기 : ', total_cnt)
print('등장 빈도가 %s번 이하인 희귀 단어의 수 : %s'%(threshold - 1, rare_cnt))
print("단어 집합에서 희귀 단어의 비율: %.2f"%((rare_cnt / total_cnt)*100))
print("전체 등장 빈도에서 희귀 단어 등장 빈도 비율 : %.2f"%((rare_freq/total_freq) * 100))

# 전체 단어 개수 중 빈도수 2 이하인 단어는 제거
# 0번 패딩 토큰을 고려하여 + 1

vocab_size = total_cnt - rare_cnt + 1
print('단어 집합의 크기 : ', vocab_size)

tokenizer = Tokenizer(vocab_size)
tokenizer.fit_on_texts(X_train)
X_train = tokenizer.texts_to_sequences(X_train)
X_test = tokenizer.texts_to_sequences(X_test)

print(X_train[:3])

y_train = np.array(train_data['label'])
y_test = np.array(test_data['label'])

drop_train = [index for index, sentence in enumerate(X_train) if len(sentence) < 1]

X_train = np.delete(X_train, drop_train, axis=0)
y_train = np.delete(y_train, drop_train, axis=0)
print(len(X_train))
print(len(y_train))

print('리뷰 최대 길이 : ',max(len(review) for review in X_train))
print('리뷰의 평균 길이 : ',sum(map(len, X_train))/len(X_train))
plt.hist([len(review) for review in X_train], bins=50)
plt.xlabel('length of samples')
plt.ylabel('number of samples')
plt.show()

def below_threshold_len(max_len, nested_list):
  count = 0
  for sentence in nested_list:
    if(len(sentence) <= max_len):
      count = count + 1

  print('전체 샘플 중 길이가 %s 이하인 샘플의 비율 : %.2f'%(max_len, (count/len(nested_list)) * 100))

max_len = 30
below_threshold_len(max_len, X_train)

X_train = pad_sequences(X_train, maxlen= max_len)
X_test = pad_sequences(X_test, maxlen = max_len)

from tensorflow.keras.layers import Embedding, Dense, LSTM
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint

embedding_dim = 100
hidden_units = 128

model = Sequential()
model.add(Embedding(vocab_size, embedding_dim))
model.add(LSTM(hidden_units))
model.add(Dense(1, activation='sigmoid'))

es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=4)
mc = ModelCheckpoint('best_model.h5', monitor='val_acc', mode='max', verbose=1, save_best_only=True)

model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])
history = model.fit(X_train, y_train,epochs=15, callbacks=[es, mc], batch_size= 64, validation_split= 0.2)

loaded_model = load_model('best_model.h5')
print("\n 테스트 정확도 : %.4f"% (loaded_model.evaluate(X_test,y_test)[1]))

def sentiment_predict(new_sentence):
  new_sentence = re.sub(r'[^ㄱ-ㅎㅏ-ㅣ가-힣]','', new_sentence)
  new_sentence = okt.morphs(new_sentence, stem=True) # 토큰화
  new_sentence = [word for word in new_sentence if not word in stopwords] #불용어 제거

  encoded = tokenizer.texts_to_sequences([new_sentence]) #정수 인코딩
  pad_new = pad_sequences(encoded, maxlen = max_len) # 패딩
  score = float(loaded_model.predict(pad_new)) # 예측
  if(score > 0.5):
    print("{:.2f}% 확률로 긍정 리뷰입니다. \n".format(score * 100))
  else:
    print("{:.2f}% 확률로 부정 리뷰입니다. \n".format((1-score) * 100))

sentiment_predict('이 영화 개꿀잼처럼보이는 개노잼인줄 알았는데 알고보니 개꿀잼인척하는 개노잼이 아닌듯한 그냥 저냥 개평작임 ㅋㅋㅋ')